/**
 * Copyright 2015 Ryoji Hasegawa
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'java'
apply plugin: 'eclipse'

sourceCompatibility = 1.7
version = '0.1'

tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
}

jar {
  manifest {
    attributes 'Implementation-Title': 'piggy-converter', 'Implementation-Version': version
  }
}

repositories {
  mavenCentral()
  maven { url 'https://repository.cloudera.com/artifactory/cloudera-repos' }
}

dependencies {
  compile 'org.apache.hadoop:hadoop-common:2.0.0-cdh4.6.0', 'org.apache.hadoop:hadoop-core:2.0.0-mr1-cdh4.6.0',
          'org.apache.pig:pig:0.11.0-cdh4.6.0',
          'net.arnx:jsonic:1.3.7', 'org.apache.commons:commons-lang3:3.3.2',
          'org.antlr:antlr:3.5.2'
}

uploadArchives {
  repositories {
    flatDir {
      dirs 'repos'
    }
  }
}

task wrapper(type: Wrapper) {
  gradleVersion = '2.0'
}

task antlrGenerate(type: JavaExec) {
  description 'Generate Java source files of Piggy Converter metadata parser.'

  def grammerDir = "${projectDir}/src/main/resources"
  def outDir = "${projectDir}/src/main/java/org/rhase/piggyconverter/generated"
  
  main = 'org.antlr.Tool'
  args = [
    grammerDir + '/PiggyConverterLexer.g',
    grammerDir + '/PiggyConverterParser.g',
    grammerDir + '/PiggyConverterTreeParser.g',
    '-o',
    outDir
    ]
  classpath = configurations.compile
}

compileJava.dependsOn antlrGenerate

task dumpAST(type: JavaExec, dependsOn: compileTestJava) {
  description 'Run parser and dump resulting rules object.'

  def script = "${projectDir}/src/test/resources/test1/test.pc"

  main = 'org.rhase.piggyconverter.DumpAST'
  args = [ script ]
  classpath = sourceSets.test.runtimeClasspath
}
